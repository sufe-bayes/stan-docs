---
pagetitle: User-Defined Functions
---

# User-Defined Functions  {#functions-programming.chapter}

# 用户自定义函数 {#functions-programming.chapter--cn}

本节译者：杜丽英、李君竹
本节校审：李君竹

This chapter explains functions from a user perspective with examples;
see the language reference for a full specification.  User-defined
functions allow computations to be encapsulated into a single named
unit and invoked elsewhere by name.  Similarly, functions allow
complex procedures to be broken down into more understandable
components.  Writing modular code using descriptively named functions
is easier to understand than a monolithic program, even if the latter
is heavily commented.^[The main problem with comments is that they can be misleading, either due to misunderstandings on the programmer's part or because the program's behavior is modified after the comment is written.  The program always behaves the way the code is written, which is why refactoring complex code into understandable units is preferable to simply adding comments.]

本章从用户视角使用示例来解释函数；请参阅语言参考以获取完整说明。用户自定义的函数允许将计算过程封装到单个命名单元中，并通过名称在其他地方调用这些函数。同样，函数将复杂过程分解为更容易理解的组成部分。即使个体化程序设计有大量的注释，使用描述性的命名的模块化代码依旧比个体程序设计更容易理解。^[注释的主要问题是它们可能会误导，可能由于程序员的误解或在程序行为被修改但注释未及时变化。程序总是按照代码编写的方式运行，这就是为什么将复杂代码重构为易于理解的单元比单纯添加注释更可取。]

## Basic functions {#basic-functions.section}

## 基本函数 {#basic-functions.section--cn}

Here's an example of a skeletal Stan program with a user-defined
relative difference function employed in the generated quantities
block to compute a relative differences between two parameters.

这是一个用户自定义的骨架 Stan 程序示例，该相对差异函数在预测值模块中用于计算两个参数之间的相对差异。

```stan
functions {
  real relative_diff(real x, real y) {
    real abs_diff;
    real avg_scale;
    abs_diff = abs(x - y);
    avg_scale = (abs(x) + abs(y)) / 2;
    return abs_diff / avg_scale;
  }
}
// ...
generated quantities {
  real rdiff;
  rdiff = relative_diff(alpha, beta);
}
```

The function is named `relative_diff`, and is declared to have
two real-valued arguments and return a real-valued result.   It is
used the same way a built-in function would be used in the generated
quantities block.

该函数被命名为 `relative_diff`，声明具有两个实值参数并返回一个实值结果。它与内置函数一样在预测值模块中使用。

### User-defined functions block {-}

### 用户自定义功能块 {-}

All functions are defined in their own block, which is labeled
`functions` and must appear before all other program blocks.  The
user-defined functions block is optional.

所有函数都在它们自有区块中定义，该块标记为 `functions` 并且必须出现在所有其他程序块之前。用户自定义功能块是可选的。

### Function bodies {-}

### 函数主体 {-}

The body (the part between the curly braces) contains ordinary Stan
code, including local variables.  The new function is used in the
generated quantities block just as any of Stan's built-in functions
would be used.

函数主体（花括号之间的部分）包含普通的 Stan 代码和局部变量。新函数与 Stan 内置的所有函数一样可以在预测值模块中使用。

### Return statements {-}

### 返回语句 {-}

Return statements, such as the one on the last line of the definition
of `relative_diff` above, are only allowed in the bodies of
function definitions.  Return statements may appear anywhere in a
function, but functions with non-void return types must end in a
return statement.

返回语句，例如上面定义的函数 `relative_diff` 的最后一行，仅允许在函数定义的主体中使用。返回语句可以出现在函数的任何位置，但具有非空返回类型的函数必须以返回语句结尾。

### Reject and error statements {-}

### 拒绝与错误语句 {-}

The Stan `reject` statement provides a mechanism to report errors or
problematic values encountered during program execution.  It accepts
any number of quoted string literals or Stan expressions as arguments.
This statement is typically embedded in a conditional statement in
order to detect bad or illegal outcomes of some processing step.

Stan 的 `reject` 语句提供了一种程序执行期间报告错误或疑问值的机制。它接受任意数量的引号字符串文字或 Stan 表达式作为参数。此语句通常嵌入在条件语句中，以检测某些处理步骤的不良或非法结果。

If an error is indicative of a problem from which it is not expected
to be able to recover, Stan provides a `fatal_error` statement.

如果一个错误表明程序无法从中恢复，可以使用 Stan 中的 `fatal_error` 语句。

#### Catching errors {-}

### 捕获错误 {-}

Rejection is used to flag errors that arise in inputs or in program
state.  It is far better to fail early with a localized informative
error message than to run into problems much further downstream (as in
rejecting a state or failing to compute a derivative).

拒绝语句用于标记输入或程序状态中出现的错误。及早提前终止运行并提供本地化的信息性错误消息要比在更下游遇到问题（例如拒绝状态或无法计算导数）要好得多。

The most common errors that are coded is to test that all of the
arguments to a function are legal.  The following function takes a
square root of its input, so requires non-negative inputs; it is coded
to guard against illegal inputs.

最常见的错误是测试函数的所有参数是否合法。下面这个函数对其输入值进行平方根运算，因此需要非负输入值；它被编码以防止不合法的输入。

```stan
real dbl_sqrt(real x) {
  if (!(x >= 0)) {
    reject("dblsqrt(x): x must be positive; found x = ", x);
  }
  return 2 * sqrt(x);
}
```

The negation of the positive test is important, because it also
catches the case where `x` is a not-a-number value.  If the
condition had been coded as `(x < 0)` it would not catch the
not-a-number case, though it could be written as
`(x < 0 || is_nan(x))`.  The positive infinite case is allowed
through, but could also be checked with the `is_inf(x)` function.
The square root function does not itself reject, but some downstream
consumer of `dbl_sqrt(-2)` would be likely to raise an error, at
which point the origin of the illegal input requires detective work.
Or even worse, as Matt Simpson pointed out in the GitHub comments, the
function could go into an infinite loop if it starts with an infinite
value and tries to reduce it by arithmetic, likely consuming all
available memory and crashing an interface.  Much better to catch
errors early and report on their origin.

正数测试的拒绝很重要，因为它也捕获了 `x` 是非数字值的情况。如果条件被编码为 `(x<0)`，它将不会捕获非数字情况，尽管可以写成 `(x < 0 || is_nan(x))`。正无穷大的情况尽管被允许，但也可以使用函数 `is_inf(x)` 进行检查。平方根函数本身不拒绝负数，但是 `dbl_sqrt(-2)` 可能会引发错误，因此需要检查不合法的输入来源。或者更糟糕的是，正如 Matt Simpson 在 GitHub 评论中指出的那样，如果函数从无穷大值开始并尝试通过计算减少它，则可能进入无限循环，可能消耗所有可用内存并崩溃接口。最好尽早捕获错误并报告其来源。

The effect of rejection depends on the program block in which the
rejection is executed.  In transformed data, rejections cause the
program to fail to load.  In transformed parameters or in the model
block, rejections cause the current state to be rejected in the
Metropolis sense.^[Just because this makes it possible to code a rejection sampler does not make it a good idea.  Rejections break differentiability and the smooth exploration of the posterior.  In Hamiltonian Monte Carlo, it can cause the sampler to be reduced to a diffusive random walk.]

拒绝的效应取决于执行拒绝的程序块。在转换数据中，拒绝会导致程序无法加载。在转换的参数或模型块中，拒绝会导致当前状态在 Metropolis 算法上被拒绝。^[仅仅因为这个，编码一个拒绝采样器并不是一个好主意。拒绝会破坏后验概率的可微性和平滑探索。在汉密尔顿蒙特卡罗中，它可能导致采样器降级为扩散随机游走。]

In generated quantities there is no way to recover and generate
the remaining parameters, so rejections cause subsequent values
to be reported as NaNs. Extra care should be taken in calling functions
which may reject in the generated quantities block.

在预测值中，没有办法恢复并生成剩余参数，此时拒绝会导致执行停止，因此在预测值模块中调用函数时应格外小心。

### Type declarations for functions {-}

### 函数的类型声明 {-}

Function argument and return types for vector and matrix types
are not declared with their sizes, unlike type declarations for variables.
Function argument type declarations may not be
declared with constraints, either lower or upper bounds or structured
constraints like forming a simplex or correlation matrix, (as is also
the case for local variables);  see the table of types in the [reference
manual](https://mc-stan.org/docs/reference-manual/types.html#variable-declaration)
for full details.

与变量的类型声明不同，向量和矩阵的函数参数和返回类型不声明维度大小。函数参数类型声明可能带有约束限制，无论是单纯性或相关矩阵的下限还是上限约束或结构约束，（对于局部变量也是如此）；请参阅 参考手册（(https://mc-stan.org/docs/reference-manual/variable-declaration.html)） 中的类型表以获取完整详细信息。

For example, here's a function to compute the entropy of a categorical
distribution with simplex parameter `theta`.

例如，下面是一个计算含有单纯形参数 `theta` 的类别分布熵的函数。

```stan
real entropy(vector theta) {
  return sum(theta .* log(theta));
}
```

Although `theta` must be a simplex, only the type `vector`
is used.^[A range of built-in validation routines is coming to Stan soon! Alternatively, the `reject` statement can be used to check constraints on the simplex.]

尽管 `theta` 必须是单纯形，只能使用 `vector` 类型。^[Stan 很快就会有一系列内置的验证程序！或者，可以使用 `reject` 语句来检查单纯形的约束。]

Upper or lower bounds on values or constrained types are not allowed
as return types or argument types in function declarations.

函数声明中不允许将上下限值或约束类型作为返回类型或参数类型。

### Array types for function declarations {-}

### 函数声明的数组类型 {-}

Array arguments have their own syntax, which follows that used in this
manual for function signatures.  For example, a function that operates
on a two-dimensional array to produce a one-dimensional array might be
declared as follows.

数组参数有自己的句法规则，遵循本手册中用于函数签名的句法规则。例如，在二维数组上操作以产生一维数组的函数可能被声明如下。

```stan
array[] real baz(array[,] real x);
```

The notation `[ ]` is used for one-dimensional arrays (as in the
return above), `[ , ]` for two-dimensional arrays,

`[ , , ]` for three-dimensional arrays, and so on.

符号 `[ ]` 用于一维数组（如上面的返回），`[ , ]` 用于二维数组， `[ , , ]` 用于三维数组，依此类推。

Functions support arrays of any type, including matrix and vector
types.  As with other types, no constraints are allowed.

函数支持包括矩阵和向量在内的任何类型的数组。与其他类型一样，不允许有任何约束。

### Data-only function arguments {-}

### 纯数据函数参数 {-}

A function argument which is a real-valued type or
a container of a real-valued type,
i.e., not an integer type or integer array type,
can be qualified using the prefix qualifier `data`.
The following is an example of a data-only function argument.

函数参数可以是一个实值类型或实值类型分类，即不是整数类型或整数数组类型但可以使用前缀限定符 `data`。 下面是一个纯数据函数参数的示例。

```stan
real foo(real y, data real mu) {
  return -0.5 * (y - mu)^2;
}
```


This qualifier restricts this argument to being invoked
with expressions which consist only of data variables,
transformed data variables, literals, and function calls.
A data-only function argument cannot involve real variables declared
in the parameters, transformed parameters, or model block.
Attempts to invoke a function using an expression which contains
parameter, transformed parameters, or model block variables
as a data-only argument will result in an error message from the
parser.

此限定符将此参数调用限制为仅能使用数据变量、转换后的数据变量、标识符和函数调用组成的表达式来进行触发。纯数据函数参数不能涉及在参数、转换后的参数或模型块中声明的实变量。试图使用包含参数、转换后的参数或模型块变量作为纯数据参数的表达式调用函数将导致解析器产生错误信息。

Use of the `data` qualifier must be consistent between the
forward declaration and the definition of a functions.

在函数的前向声明和定义之间，`data` 限定符的使用必须保持一致。

This qualifier should be used when writing functions that call the
built-in ordinary differential equation (ODE) solvers, algebraic
solvers, or map functions.  These higher-order functions have strictly
specified signatures where some arguments of are data only
expressions. (See the [ODE solver chapter](odes.qmd) for
more usage details and the functions reference manual for full
definitions.)  When writing a function which calls the ODE or
algebraic solver, arguments to that function which are passed into the
call to the solver, either directly or indirectly, should have the
`data` prefix qualifier.  This allows for compile-time type checking
and increases overall program understandability.

在编写调用内置常微分方程（ODE） 求解器，代数求解器或地图函数时可以使用这个限定符。这些高阶函数有严格指定的签名，其中一些参数仅是数据表达式。（参见 [ODE 求解器章节](#ode-solver.chapter)以获得更多使用细节，查阅函数参考手册获得完整的功能说明。）编写调用 ODE 或代数求解器的函数时，传递给调用求解器的该函数的参数应直接或间接应该有
`data` 前缀限定符。这允许编译时进行类型检查并提高整体程序的可理解性。


## Functions as statements

## 函数作为语句

In some cases, it makes sense to have functions that do not return a
value.  For example, a routine to print the lower-triangular portion
of a matrix can be defined as follows.

在某些情况下，有些函数不返回值也是合乎情理的。例如，可以定义一个打印矩阵下三角部分的例程，如下所示。

```stan
functions {
  void pretty_print_tri_lower(matrix x) {
    if (rows(x) == 0) {
      print("empty matrix");
      return;
    }
    print("rows=", rows(x), " cols=", cols(x));
    for (m in 1:rows(x)) {
      for (n in 1:m) {
        print("[", m, ",", n, "]=", x[m, n]);
      }
    }
  }
}
```

The special symbol `void` is used as the return type.  This is
not a type itself in that there are no values of type `void`; it
merely indicates the lack of a value.  As such, return statements for
void functions are not allowed to have arguments, as in the return
statement in the body of the previous example.

特殊符号 `void` 用作返回类型。这本身并不是一种类型，因为没有 `void` 类型的值；它仅仅表示缺少值。因此，空函数的返回语句不允许有参数，如前面例子中的返回语句。

Void functions applied to appropriately typed arguments may be used on
their own as statements.  For example, the pretty-print function
defined above may be applied to a covariance matrix being defined in
the transformed parameters block.

应用于适当类型的参数的 Void 函数可以单独用作语句。例如，上面定义的漂亮打印函数可以应用于转换参数块中定义的协方差矩阵。

```stan
transformed parameters {
  cov_matrix[K] Sigma;
  // ... code to set Sigma ...
  pretty_print_tri_lower(Sigma);
  // ...
}
```


## Functions accessing the log probability accumulator

## 访问对数概率累加器的函数

Functions whose names end in `_lp` are allowed to use sampling
statements and `target +=` statements; other
functions are not.  Because of this access, their use is restricted to
the transformed parameters and model blocks.

函数名以 `_lp` 结尾的函数可以使用采样语句和 `target +=` 语句；其他函数则不能。由于这种访问权限，它们的使用仅限于转换参数和模型块。
Here is an example of a function to assign standard normal priors to a
vector of coefficients, along with a center and scale, and return the
translated and scaled coefficients; see the [reparameterization
section](efficiency-tuning.qmd#reparameterization.section) for more information on
efficient non-centered parameterizations

下面是一个函数的示例，给定系数向量，以及中心化参数和尺度分配标准正态分布，并返回平移和缩放后的系数；参见【重参数化部分】(#reparameterization.section)以获得高效的非中心化参数的更多信息。

```stan
functions {
  vector center_lp(vector beta_raw, real mu, real sigma) {
    beta_raw ~ std_normal();
    sigma ~ cauchy(0, 5);
    mu ~ cauchy(0, 2.5);
    return sigma * beta_raw + mu;
  }
  // ...
}
parameters {
  vector[K] beta_raw;
  real mu_beta;
  real<lower=0> sigma_beta;
  // ...
}
transformed parameters {
  vector[K] beta;
  // ...
  beta = center_lp(beta_raw, mu_beta, sigma_beta);
  // ...
}
```

## Functions implementing change-of-variable adjustments

Functions whose names end in `_jacobian` can use the
`jacobian +=` statement. This can be used to implement a custom
change of variables for arbitrary parameters.

For example, this function recreates the built-in
`<upper=x>` transform on real numbers:
```stan
real upper_bound_jacobian(real x, real ub) {
  jacobian += x;
  return ub - exp(x);
}
```

It can be used as a replacement for `real<lower=ub>` as follows:

```stan
functions {
  // upper_bound_jacobian as above
}
data {
  real ub;
}
parameters {
  real b_raw;
}
transformed parameters {
  real b = upper_bound_jacobian(b_raw, ub);
}
model {
  b ~ lognormal(0, 1);
  // ...
}
```

## Functions acting as random number generators

## 充当随机数生成器的函数

A user-specified function can be declared to act as a (pseudo) random
number generator (PRNG) by giving it a name that ends in `_rng`.
Giving a function a name that ends in `_rng` allows it to access
built-in functions and user-defined functions that end in
`_rng`, which includes all the built-in PRNG functions.  Only
functions ending in `_rng` are able access the built-in PRNG
functions.  The use of functions ending in `_rng` must therefore
be restricted to transformed data and generated quantities blocks like
other PRNG functions; they may also be used in the bodies of other
user-defined functions ending in `_rng`.

用户设定的函数可以通过给它一个以 `_rng` 结尾的名称来声明（伪）随机数生成器（PRNG）。给函数一个以 `_rng` 结尾的名称允许它访问以 `_rng` 结尾的内置函数和用户自定义函数，其中包括所有内置的 PRNG 函数。只有以 `_rng` 结尾的函数才能访问内置的 PRNG 函数。因此，以 `_rng` 结尾的函数的使用像其他 PRNG 函数一样，必须限制在转换数据和预测值模块中；它们也可以用在以 `_rng' 结尾的其他用户自定义函数的主体中。

For example, the following function generates an $N \times K$ data
matrix, the first column of which is filled with 1 values for the
intercept and the remaining entries of which have values drawn
from a standard normal PRNG.

例如，下面的函数生成一个 N×K 数据矩阵，其中第一列全为1充当截距，其余值从标准正态 PRNG 中抽取。

```stan
matrix predictors_rng(int N, int K) {
  matrix[N, K] x;
  for (n in 1:N) {
    x[n, 1] = 1.0;  // intercept
    for (k in 2:K) {
      x[n, k] = normal_rng(0, 1);
    }
  }
  return x;
}
```

The following function defines a simulator for regression outcomes
based on a data matrix `x`, coefficients `beta`, and noise
scale `sigma`.

下面的函数定义了一个基于数据矩阵 `x`，系数 `beta` 和噪声尺度 `sigma` 的回归结果模拟器。

```stan
vector regression_rng(vector beta, matrix x, real sigma) {
  vector[rows(x)] y;
  vector[rows(x)] mu;
  mu = x * beta;
  for (n in 1:rows(x)) {
    y[n] = normal_rng(mu[n], sigma);
  }
  return y;
}
```

These might be used in a generated quantity block to simulate some
fake data from a fitted regression model as follows.

这些可能用于预测值模块中，以模拟来自拟合回归模型的一些伪造数据，如下所示。

```stan
parameters {
  vector[K] beta;
  real<lower=0> sigma;
  // ...
}
generated quantities {
  matrix[N_sim, K] x_sim;
  vector[N_sim] y_sim;
  x_sim = predictors_rng(N_sim, K);
  y_sim = regression_rng(beta, x_sim, sigma);
}
```

A more sophisticated simulation might fit a multivariate\ normal to the
predictors `x` and use the resulting parameters to generate
multivariate normal draws for `x_sim`.

更复杂的模拟可能会从预测值 `x` 得到一个多元正态分布，使用这个结果参数从 `x_sim` 得到一个新的多元正态分布抽样。

## User-defined probability functions

## 用户自定义的概率函数

Probability functions are distinguished in Stan by names ending in
`_lpdf` for density functions and `_lpmf` for mass
functions; in both cases, they must have `real` return types.

在 Stan 中，以 `_lpdf` 结尾表示概率密度函数，以 `_lpmf` 结尾表示概率质量函数；在这两种情况下，它们都必须具有真实的返回类型。

Suppose a model uses several standard normal distributions, for which
there is not a specific overloaded density nor defaults in Stan.  So
rather than writing out the location of 0 and scale of 1 for all of
them, a new density function may be defined and reused.

假设一个模型使用了几个标准正态分布，但在 Stan 中没有特定的重载密度或默认值。因此，与其把所有的分布都定义为均值为0，尺度为1，不如定义一个新的密度函数并重复使用。

```stan
functions {
  real unit_normal_lpdf(real y) {
    return normal_lpdf(y | 0, 1);
  }
}
// ...
model {
  alpha ~ unit_normal();
  beta ~ unit_normal();
  // ...
}
```

The ability to use the `unit_normal` function as a density is
keyed off its name ending in `_lpdf` (names ending in
`_lpmf` for probability mass functions work the same way).

使用 `unit_normal` 函数作为概率密度函数的关键在于以 `_lpdf` 结尾命名（以 `_lpmf` 结尾的概率质量函数也同样起效）。

In general, if `foo_lpdf` is defined to consume $N + 1$
arguments, then

通常，如果 `foo_lpdf` 被定义为包含 N+1 个参数，那么

```stan
y ~ foo(theta1, ..., thetaN);
```

can be used as shorthand for

也可以用做如下定义的简略表达方式

```stan
target += foo_lpdf(y | theta1, ..., thetaN);
```

As with the built-in functions, the suffix `_lpdf` is dropped and
the first argument moves to the left of the tilde symbol (`~`)
in the distribution statement.

在采样语句中，与内置函数一样，后缀 `_lpdf` 被删除，第一个参数移动到采样符号（`~`）的左侧。

Functions ending in `_lpmf` (for probability mass functions),
behave exactly the same way.  The difference is that the first
argument of a density function (`_lpdf`) must be continuous (not
an integer or integer array), whereas the first argument of a mass
function (`_lpmf`) must be discrete (integer or integer array).

以 `_lpmf` 结尾的函数（概率质量函数）的表现完全相同。区别在于，概率密度函数（`_lpdf`）的第一个参数必须是连续的（不是整数或整数数组），而概率质量函数（`_lpmf`）的第一个参数必须是离散的（整数或整数数组）。

## Overloading functions

## 重载函数

As described in the
[reference manual](https://mc-stan.org/docs/reference-manual/user-functions.html#function-names)
function overloading is permitted in Stan, beginning in version 2.29.

根据[参考手册](https://mc-stan.org/docs/reference-manual/user-functions.html#function-names)中的描述，Stan 从2.29版本开始允许函数重载。

This means multiple functions can be defined with the same name as long as
they accept different numbers or types of arguments. User-defined functions can
also overload Stan library functions.

这意味着可以定义多个具有相同名称的函数，只要它们接受不同数量或类型的参数即可。用户自定义的函数也可以重载 Stan 库函数。

### Warning on usage {-}

### 使用警告 {-}

Overloading is a powerful productivity tool in programming languages, but it can
also lead to confusion.
In particular, it can be unclear at first glance which version of a function is
being called at any particular call site, especially with type promotion allowed
between scalar types. Because of this, it is a programming best practice that
overloaded functions maintain the same meaning across definitions.

重载是编程语言中一种强大的生产力工具，但它也可能导致混淆。特别是一眼看上去可能不清楚在任何特定调用点调用的是哪个版本的函数，尤其是在允许标量类型之间进行类型提升的情况下。因此，编程最佳实践是重载函数在不同定义中保持相同的含义。

For example, consider a function `triple` which has the following three
signatures

例如，考虑一个名为 `triple` 的函数，它具有以下三个签名

```stan
real triple(real x);
complex triple(complex x);
array[] real triple(array[] real);
```
One should expect that all overloads of this function perform the same basic task.
This should lead to definitions of these functions which would satisfy the
following assumptions that someone reading the program would expect

人们应该期望这个函数的所有重载都执行相同的基本任务。这使得这些函数的定义应该能满足读者读到这些程序时的期望假设。

```stan
// The function does what it says
triple(3.0) == 9.0
// It is defined reasonably for different types
triple(to_complex(3.0)) == to_complex(triple(3.0))
// A container version of this function works by element
triple({3.0, 4.0})[0] == triple({3.0, 4.0}[0])
```

Note that none of these properties are enforced by Stan, they are mentioned
merely to warn against uses of overloading which cause confusion.

请注意，Stan 并未强制执行这些属性，仅仅警告我们重载的使用会引起混淆。

### Function resolution {-}

### 函数决议 {-}

Stan resolves overloaded functions by the number and type of arguments passed to
the function. This can be subtle when multiple signatures with the same number
of arguments are present.

Stan 通过传递给函数的参数的数量和类型来解决重载函数的问题。当存在具有相同数量参数的多个签名时，这可能会很微妙。

Consider the following function signatures
考虑如下的函数签名

```stan
real foo(int a, real b);
real foo(real a, real b);
```
Given these, the function call `foo(1.5, 2.5)` is unambiguous - it must resolve
to the second signature.
But, the function call `foo(1, 1.5)` could be valid for _either_ under Stan's
promotion rules, which allow integers to be promoted to real numbers.

鉴于这些，函数调用 `foo(1.5, 2.5)` 是明确的-它必须转为第二个签名。但是，函数调用 `foo(1, 1.5)` 在 Stan 的提升规则下可能对_任一_都有效，可以从整数拓展到为实数。

To resolve this, Stan selects the signature which requires the fewest number of
promotions for a given function call. In the above case, this means
the call `foo(1, 1.5)` would select the first signature, because it requires 0
promotions (the second signature would require 1 promotion).

为了解决这个问题，对于特定的函数调用，Stan 选择需要最少数量提升的签名。在上述情况下，这意味着调用 `foo(1,1.5)` 将选择第一个签名，因为它需要0次提升（第二个签名将需要1次提升）。

Furthermore, there must be only one such signature, e.g., the minimum number of
promotions must be a unique minimum. This requirement forbids certain kinds of
overloading. For example, consider the function signatures

此外，必须只有一个这样的签名，例如，最小数量的提升必须是唯一的最小值。这个要求禁止了某些类型的重载。例如，考虑函数签名。

```stan
real bar(int x, real y);
real bar(real x, int y);
```
These signatures do not have a unique minimum number of promotions for the call
`bar(1, 2)`. Both signatures require one `int` to `real` promotion, and so it
cannot be determined which is correct. Stan will produce a compilation error in
this case.

这些签名对于调用 `bar(1,2)` 没有唯一的最小提升数量。两个签名都需要一个 `int` 到 `real` 的提升，因此无法确定哪个是正确的。在这种情况下，Stan 将产生一个编译错误。

Promotion from integers to complex numbers is considered to be two
separate promotions, first from `int` to `real`, then from `real` to `complex`. This
means that integer arguments will "prefer" a signature with real types over
complex types.

从整数到复数的提升被认为是两个单独的提升，首先从 `int` 到 `real`，然后从 `real` 到 `complex`。这意味着整数参数将“更喜欢”具有实数类型而不是复数类型的签名。

For example, consider the function signatures

例如，考虑函数签名

```stan
real pop(real x);
real pop(complex x);
```
Stan will select the first signature when `pop` is called with an integer
argument such as `pop(0)`.

当使用整数参数如 `pop(0)` 来调用 `pop` 时，Stan 将选择第一个签名。

## Documenting functions {#documenting-functions.section}

## 记录函数 {#documenting-functions.section--cn}

Functions will ideally be documented at their interface level.  The
Stan style guide for function documentation follows the same format as
used by the Doxygen (C++) and Javadoc (Java) automatic documentation
systems.  Such specifications indicate the variables and their types
and the return value, prefaced with some descriptive text.

理想是函数在接口级别进行记录。Stan 的函数文档风格指南遵循与 Doxygen（C ++）和 Javadoc（Java）自动文档系统相同的格式。这些规范指示变量及其类型和返回值，并以一些描述性文本为前言。

For example, here's some documentation for the prediction matrix
generator.

例如，这是预测矩阵生成器的一些文档。

```stan
/**
 * Return a data matrix of specified size with rows
 * corresponding to items and the first column filled
 * with the value 1 to represent the intercept and the
 * remaining columns randomly filled with unit-normal draws.
 *
 * @param N Number of rows corresponding to data items
 * @param K Number of predictors, counting the intercept, per
 *          item.
 * @return Simulated predictor matrix.
 */
matrix predictors_rng(int N, int K) {
  // ...
```

The comment begins with `/**`, ends with `*/`, and has an
asterisk (`*`) on each line.  It uses `@param` followed by
the argument's identifier to document a function argument.  The tag
`@return` is used to indicate the return value.  Stan does not
(yet) have an automatic documentation generator like Javadoc or
Doxygen, so this just looks like a big comment starting with `/*`
and ending with `*/` to the Stan parser.

注释以 `/**` 开头，以 `*/` 结尾，并且每行都有一个星号（`*`）。它使用 `@param` 后跟参数的标识符来记录函数参数。标记 `@return` 用于指示返回值。 Stan 没有（尚未）像 Javadoc 或 Doxygen 那样的自动文档生成器，因此对于 Stan 解析器，这看起来就像一个以`/*`开头并以`*/`结尾的大注释。

For functions that raise exceptions, exceptions can be documented using
`@throws`.^[As of Stan 2.9.0, the only way a user-defined producer will raise an exception is if a function it calls (including distribution statements) raises an exception via the reject statement.]

对于引发异常的函数，可以使用 `@throws` 记录异常。^[截至Stan 2.9.0，用户定义的生产者唯一引发异常的方式是它调用的函数（包括采样语句）通过拒绝语句引发异常。]

For example,

例如，

```stan
 /** ...
 * @param theta
 * @throws If any of the entries of theta is negative.
 */
real entropy(vector theta) {
  // ...
}
```

Usually an exception type would be provided, but these are not exposed
as part of the Stan language, so there is no need to document them.

通常会提供异常类型，但这些不作为 Stan 语言的一部分公开，因此无需记录它们。

## Summary of function types

## 函数类型摘要

Functions may have a void or non-void return type and they may or may
not have one of the special suffixes, `_lpdf`, `_lpmf`,
`_lp`, or `_rng`.

函数返回类型可能为无类型或非无类型返回类型，并且可能具有或不具有其中一种特殊后缀，`_lpdf`，`_lpmf`，`_lp` 或 `_rng`。

### Void vs. non-void return {-}

### 无类型与非无类型返回 {-}

Only functions declared to return `void` may be used as
statements.  These are also the only functions that use `return`
statements with no arguments.

只有声明为返回 `void` 的函数才能用作语句。这些也是唯一使用没有参数的 `return` 语句的函数。

Only functions declared to return non-`void` values may be used
as expressions.  These functions require `return` statements with
arguments of a type that matches the declared return type.

只有声明为返回非 `void` 值的函数才能用作表达式。这些函数需要具有与声明的返回类型匹配的类型的参数的 `return` 语句。

### Suffixed or non-suffixed {-}

### 带后缀或不带后缀 {-}

Only functions ending in `_lpmf` or `_lpdf` and with
return type `real` may be used as probability functions in
distribution statements.

只有以 `_lpmf` 或 `_lpdf` 结尾并且返回类型为 `real` 的函数才能用作采样语句中的概率函数。

Only functions ending in `_lp` may access the log probability
accumulator through distribution statements or `target +=`
statements.  Such functions may only be used in the transformed
parameters or model blocks.

只有以 `_lp` 结尾的函数才能通过采样语句或 `target + =` 语句访问对数概率累加器。这样的函数只能在转换参数或模型块中使用。

Only functions ending in `_rng` may access the built-in
pseudo-random number generators.  Such functions may only be used in
the generated quantities block or transformed data block, or in the
bodies of other user-defined functions ending in `_rng`.

只有以 `_rng` 结尾的函数才能访问内置伪随机数生成器。这样的函数只能在预测值模块或转换数据块中使用，或在以其他用户自定义的以 `_rng` 结尾的函数主体中使用。

## Recursive functions

## 递归函数

Stan supports recursive function definitions, which can be useful for
some applications.  For instance, consider the matrix power operation,
$A^n$, which is defined for a square matrix $A$ and positive integer
$n$ by

Stan 支持定义递归函数，这对于某些应用程序很有用。例如，考虑矩阵幂运算 A^n，它对于正方形矩阵 A 和正整数 n 定义为

$$
A^n
=
\begin{cases}
\textrm{I} & \quad\text{if } n = 0, \text{ and} \\
A \, A^{n-1} & \quad\text{if } n > 0.
\end{cases}
$$

where $\textrm{I}$ is the identity matrix.  This definition can be
directly translated to a recursive function definition.

其中 I 是单位矩阵。此定义可以直接转换为一个递归函数的定义。

```stan
matrix matrix_pow(matrix a, int n) {
  if (n == 0) {
    return diag_matrix(rep_vector(1, rows(a)));
  } else {
    return a *  matrix_pow(a, n - 1);
  }
}
```
It would be more efficient to not allow the recursion to go all the way to
the base case, adding the following conditional clause.

在定义之前先声明函数签名是必要的，以便在嵌入式使用 `matrix_pow` 时已经被定义好。添加以下条件子句不允许递归一直到基本情况，会更有效率。

```stan
else if (n == 1) {
  return a;
}
```


## Truncated random number generation

## 截断随机数生成

### Generation with inverse CDFs {-}

### CDF 逆的生成 {-}

To generate random numbers, it is often sufficient to invert their
cumulative distribution functions.  This is built into many of the
random number generators.  For example, to generate a standard
logistic variate, first generate a uniform variate
$u \sim \textsf{uniform}(0, 1)$, then run through the inverse
cumulative distribution function, $y = \textrm{logit}(u)$.  If this
were not already built in as `logistic_rng(0, 1)`, it could be
coded in Stan directly as

为了生成随机数，通常只需反转它们的累积分布函数。这已经内置在许多随机数生成器中。例如，要生成标准 logistic 变量，首先生成均匀变量 u∼uniform（0,1），然后通过运行累积分布函数的逆，y=logit（u）。如果这还没有内置为 `logistic_rng(0,1)`，则可以直接在 Stan 使用如下编码

```stan
real standard_logistic_rng() {
  real u = uniform_rng(0, 1);
  real y = logit(u);
  return y;
}
```


Following the same pattern, a standard normal RNG could be coded as

按照相同的模式，可以编码标准正态 RNG

```stan
real standard_normal_rng() {
  real u = uniform_rng(0, 1);
  real y = inv_Phi(u);
  return y;
}
```

that is, $y = \Phi^{-1}(u)$, where $\Phi^{-1}$ is the inverse cumulative
distribution function for the standard normal distribution, implemented in
the Stan function `inv_Phi`.

也就是说，y=Φ^{−1}（u），其中 Φ^{−1} 是标准正态分布累积分布的逆函数，在 Stan 函数可以用 `inv_Phi` 实现。

In order to generate non-standard variates of the location-scale
variety, the variate is scaled by the scale parameter and shifted by
the location parameter.  For example, to generate
$\textsf{normal}(\mu, \sigma)$ variates, it is enough to generate a
uniform variate $u \sim \textsf{uniform}(0, 1)$, then convert it to a
standard normal variate, $z = \Phi(u)$, where
$\Phi$ is the inverse cumulative distribution function for the
standard normal, and then, finally, scale and translate it, $y = \mu +
\sigma \times z$.  In code,

为了生成具有不同位置-尺度参数的非标准变量，变量按尺度参数缩放并按位置参数移动。例如，要生成 normal（μ，σ）变量，只需生成均匀变量 u∼uniform（0,1），然后将其转换为标准正态变量 z=Φ（u），其中 Φ 是标准正态累积分布函数，并最后缩放并平移它 y=μ+σz。代码为，

```stan
real my_normal_rng(real mu, real sigma) {
  real u = uniform_rng(0, 1);
  real z = inv_Phi(u);
  real y = mu + sigma * z;
  return y;
}
```

A robust version of this function would test that the arguments are
finite and that `sigma` is non-negative, e.g.,

这个函数的稳健版本将测试参数是否有限且 `sigma` 是否为非负数，例如

```stan
  if (is_nan(mu) || is_inf(mu)) {
    reject("my_normal_rng: mu must be finite; ",
           "found mu = ", mu);
  }
  if (is_nan(sigma) || is_inf(sigma) || sigma < 0) {
    reject("my_normal_rng: sigma must be finite and non-negative; ",
           "found sigma = ", sigma);
  }
```

### Truncated variate generation {-}

### 截断变量生成

Often truncated uniform variates are needed, as in survival analysis
when a time of death is censored beyond the end of the observations.
To generate a truncated random variate, the cumulative distribution is
used to find the truncation point in the inverse CDF, a uniform
variate is generated in range, and then the inverse CDF translates it
back.

截断均匀变量经常被用到，例如在生存分析中，当死亡时间在观察结束后。要生成截断的随机变量，累积分布用于在 CDF 的逆函数中找到截断点，在范围内生成均匀变量，然后 CDF 的逆函数将其转换回来。

#### Truncating below {-}

#### 向下截断 {-}

For example, the following code generates
a $\textsf{Weibull}(\alpha, \sigma)$ variate truncated below
at a time $t$,^[The original code and impetus for including this in the manual came from the [Stan forums post](http://discourse.mc-stan.org/t/rng-for-truncated-distributions/3122/7); by user `lcomm`, who also explained truncation above and below.]

例如，以下代码生成一个 $\textsf{Weibull}(\alpha, \sigma)$ 变量并且在在时间 $t$ 以下截断，^[原始代码和将其包含在手册中的动机来自 Stan 论坛中由用户 `lcomm` 撰写的[帖子](http://discourse.mc-stan.org/t/rng-for-truncated-distributions/3122/7)；他还解释了向上截断和向下截断。]

```stan
real weibull_lb_rng(real alpha, real sigma, real t) {
  real p = weibull_cdf(lt | alpha, sigma);   // cdf for lb
  real u = uniform_rng(p, 1);               // unif in bounds
  real y = sigma * (-log1m(u))^inv(alpha);  // inverse cdf
  return y;
}
```

#### Truncating above and below {-}

#### 区间截断 {-}

If there is a lower bound and upper bound, then the CDF trick is used
twice to find a lower and upper bound.  For example, to generate a
$\textsf{normal}(\mu, \sigma)$ truncated to a region $(a, b)$, the
following code suffices,

如果有下限和上限，则使用两次CDF技巧找到下限和上限。例如，要生成一个 $\textsf{normal}(\mu, \sigma)$ 截断到区域 $(a, b)$ 的变量，以下代码就足够了，

```stan
real normal_lub_rng(real mu, real sigma, real lb, real ub) {
  real p_lb = normal_cdf(lb | mu, sigma);
  real p_ub = normal_cdf(ub | mu, sigma);
  real u = uniform_rng(p_lb, p_ub);
  real y = mu + sigma * inv_Phi(u);
  return y;
}
```

To make this more robust, all variables should be tested for
finiteness, `sigma` should be tested for positiveness, and
`lb` and `ub` should be tested to ensure the upper bound is
greater than the lower bound.  While it may be tempting to compress
lines, the variable names serve as a kind of chunking of operations
and naming for readability;  compare the multiple statement version
above with the single statement

```stan
  return mu + sigma * inv_Phi(uniform_rng(normal_cdf(lb | mu, sigma),
                                          normal_cdf(ub | mu, sigma)));
```

for readability.  The names like `p` indicate probabilities, and
`p_lb` and `p_ub` indicate the probabilities of the
bounds.  The variable `u` is clearly named as a uniform variate,
and `y` is used to denote the variate being generated itself.

为了使其更稳健，应测试所有变量是否有限，`sigma` 是否为正数，并测试 `lb` 和 `ub` 以确保上限大于下限。与上面的多个语句版本的可读性进行比较，虽然压缩行可能很诱人，但变量名称充当操作分块和命名。像 `p` 这样的名称表示概率，并且 `p_lb` 和 `p_ub` 表示概率的上界和下界。变量`u`显然命名为均匀变量，`y` 表示正在生成的变量本身。
